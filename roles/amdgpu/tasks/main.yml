# Install AMD gpu and upgrade kernel

- name: Download AMD driver bundle
  become: yes
  unarchive:
    src: "{{ urls['amdgpupro'][location] }}"
    dest: /var/tmp
    remote_src: yes
  register: downloadbundle

- name: Uninstall old AMD driver
  become: yes
  command: /usr/bin/amdgpu-pro-uninstall -y
  args:
    removes: /usr/bin/amdgpu-pro-uninstall
  when: downloadbundle.changed

- name: Check AMD driver install
  command: dpkg -l clinfo-amdgpu-pro
  register: clinfopackage
  ignore_errors: yes
  changed_when: no
  failed_when: false

- name: DEBUG downloadbundle
  debug:
    msg: "{{ downloadbundle }}"

- name: Install AMD driver bundle
  become: yes
  command: ./amdgpu-install --opencl=legacy,rocr --headless --no-dkms -y
  when:
    - not ansible_check_mode
    - clinfopackage.rc > 0
  args:
    chdir: "{{ downloadbundle.dest }}/{{ downloadbundle.src | regex_replace('^.*(amdgpu-pro-.+).tar.xz$', '\\1') }}"

# Required to make above fully functional with Docker
- name: Install amdgpu-pro
  become: yes
  apt:
    name: amdgpu-pro

# Workaround due to 21.30 bug with OpenCL, need to overwrite libs with 20.40 version
- name: Download 20.40 libs
  become: yes
  unarchive:
    src: "{{ urls['2040libs'][location] }}"
    dest: /var/tmp
    remote_src: yes
  register: download2040libs

- name: Replace 21.30 libs with 20.40 libs
  become: yes
  synchronize:
    src: "/var/tmp/x86_64-linux-gnu.20.40/"
    dest: "/opt/amdgpu-pro/lib/x86_64-linux-gnu/"
    delete: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"
  when: download2040libs.changed

- name: Install MESA packages and clinfo
  become: yes
  apt:
    name: "{{ item }}"
  with_items:
    - mesa-common-dev
    - mesa-opencl-icd
    - mesa-utils-extra
    - clinfo
    - libvulkan1
    - mesa-vulkan-drivers
    - vulkan-utils

- name: Add wes to video group
  become: yes
  user:
    name: wes
    append: yes
    groups: video

- name: Upgrading kernel to support AMD GPU fast hashing
  become: yes
  apt:
    name: "{{ item }}"
  with_items:
    - linux-image-4.14.0-rc4-custom=4.14.0-rc4-custom-1
    - linux-headers-4.14.0-rc4-custom=4.14.0-rc4-custom-1
    - linux-libc-dev=4.14.0-rc4-custom-1
  when: ansible_distribution_version < 18.04

- name: Add kernel option for new linux kernel
  become: yes
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: 'GRUB_CMDLINE_LINUX="amdgpu.vm_fragment_size=9"'
  register: gruboptions1
  when: location == "weshouse"

- name: Add kernel option for new linux kernel
  become: yes
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: 'GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0 amdgpu.vm_fragment_size=9 amdgpu.hw_i2c=1"'
  register: gruboptions2
  when: location == "jamiehouse"

- name: Update grub to pick up changes
  become: yes
  command: update-grub
  when: gruboptions1.changed or gruboptions2.changed

- name: Update initramfs
  become: yes
  command: update-initramfs -u
  when: gruboptions1.changed or gruboptions2.changed

- name: Install pip3
  become: yes
  apt:
    name: "python3-pip"

- name: Install amdgpu-fan
  become: yes
  pip:
    executable: "pip3"
    name: "amdgpu-fan"

- name: Install config file for amdgpu-fan
  become: yes
  template:
    src: templates/amdgpu-fan.yml
    dest: /etc/amdgpu-fan.yml
  register: amdgpu_fan_config_file_changed

- name: Install systemd service for amdgpu-fan
  become: yes
  template:
    src: templates/amdgpu-fan.service
    dest: /etc/systemd/system/amdgpu-fan.service

- name: Enable amdgpu-fan
  become: yes
  systemd:
    enabled: yes
    name: amdgpu-fan

- name: Start amdgpu-fan
  become: yes
  systemd:
    state: started
    name: amdgpu-fan

- name: Restart admgpu-fan
  become: yes
  systemd:
    state: restarted
    daemon_reload: yes
    name: amdgpu-fan
  when: amdgpu_fan_config_file_changed.changed
